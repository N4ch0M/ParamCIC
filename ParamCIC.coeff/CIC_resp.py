"""Parameterized CIC Filter using Python"""

# Bloque 1 Genera el filtro
# ===============================

# Importa librer√≠as
import numpy as np
import matplotlib.pyplot as plt

# Par√°metros
f_clk = 50e6        # Frecuencia de reloj en Hz
R = 1               # Factor de interpolaci√≥n
M = 3               # Retardo diferencial
N = 2               # N√∫mero de secciones

# El filtro CIC se puede representar como una cascada de integradores y combinadores.
# H(s) = (1 - z^(-M))^num_sections / (1 - z^(-1))^num_sections
# Para esto, usamos la versi√≥n digital del filtro.

# Funci√≥n de transferencia en frecuencia
z = np.exp(2j * np.pi * np.linspace(0, 0.5, 1024 * R))

# Respuesta en frecuencia del filtro CIC (en t√©rminos de Z)
numerator = (1 - z**(-M))**N
denominator = (1 - z**(-1))**N
# Evita divisi√≥n por cero en el denominador (evitar que se aproxime a cero)
denominator = np.where(np.abs(denominator) < 1e-9, 1e-9, denominator)

# Respuesta en frecuencia
h = numerator / denominator
# Magnitud de la respuesta en frecuencia
magnitude = np.abs(h)
# Reemplaza los valores cercanos a cero con un valor m√≠nimo peque√±o
magnitude = np.maximum(magnitude, 1e-9)

# Convertimos la frecuencia normalizada a Hz, ajustando por el factor de interpolaci√≥n
f = np.linspace(0, f_clk / R / 2, 1024 * R)  # Dividimos f_clk por R

# ========================
# Muestra los resultados
# ========================

# Graficamos la comparaci√≥n
plt.figure(figsize=(10, 6))

# Magnitud en dB
plt.plot(f, 20 * np.log10(magnitude), label='CIC')

# Personaliza la gr√°fica
plt.title('Comparaci√≥n de la Respuesta en Frecuencia (16-bit vs Flotante)')
plt.xlabel('Frecuencia (Hz)')
plt.ylabel('Magnitud (dB)')
plt.grid(True)
plt.legend()
plt.ylim(-100, 30)
plt.tight_layout()
plt.show()

# %% Bloque 2 Verificaci√≥n del filtro
# =====================================

# ======================================================================
# Genera una se√±al temporal (suma de se√±ales de diferentes frecuencias)
# ======================================================================

# Vector de tiempo, 1 ms con frecuencia de muestreo f_clk
f_clk = 50e6        # Frecuencia de reloj
t = np.linspace(0, 0.01, int(0.01 * f_clk), endpoint=False)  

# Se√±al mixta con dos frecuencias
f1 = 2e5
f2 = 10e6
signal = 0.5 * np.sin(2 * np.pi * f1 * t) + 0.35 * np.sin(2 * np.pi * f2 * t)

# Filtrar la se√±al usando el filtro FIR
filtered_signal = np.convolve(signal, h, mode='same')

# Graficar la se√±al original y la filtrada en el dominio del tiempo
plt.figure(figsize=(10, 6))

# Se√±al original
muestras = 1000
plt.subplot(2, 2, 1)
plt.plot(t[:muestras], signal[:muestras])  # Se muestra una porci√≥n para mejor visualizaci√≥n
plt.title("Se√±al original en el dominio del tiempo")
plt.xlabel("Tiempo (s)")
plt.ylabel("Amplitud")
plt.grid(True)

# Se√±al filtrada
plt.subplot(2, 2, 2)
plt.plot(t[:muestras], filtered_signal[:muestras])
plt.title("Se√±al filtrada en el dominio del tiempo")
plt.xlabel("Tiempo (s)")
plt.ylabel("Amplitud")
plt.grid(True)

# Transformada de Fourier (FFT)
n_fft = 2**14  # Tama√±o de la FFT
f_signal = np.fft.fft(signal, n_fft)
f_filtered_signal = np.fft.fft(filtered_signal, n_fft)

# Normalizaci√≥n y espectro unilateral
f_signal_mag = np.abs(f_signal[:n_fft//2]) / (n_fft//2)
f_filtered_signal_mag = np.abs(f_filtered_signal[:n_fft//2]) / (n_fft//2)

# Eje de frecuencias
f_axis = np.fft.fftfreq(n_fft, 1/f_clk)[:n_fft//2]  # Solo parte positiva

# Gr√°fico en el dominio de la frecuencia
plt.subplot(2, 2, 3)
plt.plot(f_axis, 20 * np.log10(f_signal_mag), label="Se√±al original")
plt.title("Espectro de la se√±al original")
plt.xlabel("Frecuencia (Hz)")
plt.ylabel("Magnitud (dB)")
plt.grid(True)
plt.ylim(-100, 0)

plt.subplot(2, 2, 4)
plt.plot(f_axis, 20 * np.log10(f_filtered_signal_mag), label="Se√±al filtrada")
plt.title("Espectro de la se√±al filtrada")
plt.xlabel("Frecuencia (Hz)")
plt.ylabel("Magnitud (dB)")
plt.grid(True)
plt.ylim(-50, 50)

plt.tight_layout()
plt.show()

# %% Bloque 3 Guarda para usar como se√±al en el testbench
# =========================================================

# ======================================================================
# Escribe los datos a un archivo
# ======================================================================

# Acoto la se√±al
signal_limited = signal[:muestras]

# Escalado por 2^15 (para 16 bits)
scale_factor = 2**15
# Redondeo y conversi√≥n a enteros
sig_scaled = np.round(signal_limited * scale_factor).astype(int)

sig_name = "..\\ParamCIC.srcs\\sim_1\\data\\input_signal.dat"

with open(sig_name, "w", encoding="utf-8") as file:
    for data in sig_scaled:
        # Convertir a complemento a dos (para 16 bits)
        if data < 0:
            data = (1 << 16) + data
        # Escribir en hexadecimal con salto de l√≠nea
        file.write(f"{data:04X}\n")

# Mensaje de confirmaci√≥n mejorado
print(f"‚úÖ Se√±al de entrada guardada en '{sig_name}'")
print(f"üìÇ Ubicaci√≥n: {sig_name}")
print(f"üî¢ Total de muestras: {len(sig_scaled)}")


# %%
